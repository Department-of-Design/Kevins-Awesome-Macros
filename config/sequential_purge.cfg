[save_variables]
filename: ~/variables.cfg

[gcode_macro CHECK_PURGES]
description: Checks if purge section is full. Only needed when using the limited version.
gcode:

    {% if printer.save_variables.variables.purge_index > printer["gcode_macro _KAM_SETTINGS"].purge_sections_amount and printer["gcode_macro _KAM_SETTINGS"].continuous is not true%}
        {action_raise_error("Purge area is full! Please remove all purges. Use RESET_PURGES when done.")}
    {% endif %}

[gcode_macro RESET_PURGES]
description: Resets the purge_index to 1 indicating there is no purgeline present. Only needed when using the Limited version.
gcode:
    SAVE_VARIABLE VARIABLE=purge_index VALUE=1
    RESPOND MSG="Purges are reset!"

[gcode_macro _INITIALIZE_PURGE]
description: Initializes the purges for initial install.
gcode:
    SAVE_VARIABLE VARIABLE=purge_index VALUE=1
    SAVE_VARIABLE VARIABLE=delta_purge_end_location VALUE=0,0
    RESPOND MSG="Initialized!"

[gcode_macro SEQUENTIAL_PURGE]
description: Makes sequential purges in case you forget to remove the purge your previous print did. Requires save_variables
gcode:
    {% set pi = (3.141592653589793) | float %}
    {% set tau = (pi * 2) | float %}

    {% set purge_index = printer.save_variables.variables.purge_index | int %}                                                      # gets current purge order location thingy
    {% set delta_purge_end_location = printer.save_variables.variables.delta_purge_end_location %}     
    
    {% set kam_settings = printer["gcode_macro _KAM_SETTINGS"] %}
    {% set continuous = kam_settings.continuous | lower | default("true") %}
    {% set delta_mode = kam_settings.delta_mode | lower | default("false") %}
    {% set purge_sections_amount = kam_settings.purge_sections_amount | int | default(5) %}
    {% set stop_print_on_warning = kam_settings.stop_print_on_warning | lower | default("false") %}
    {% set warning_time = kam_settings.warning_time | int | default(30) %}
    {% set x_purge_offset = kam_settings.x_purge_offset | float | default(10) %}
    {% set y_purge_offset = kam_settings.y_purge_offset | float | default(3) %}
    {% set purge_height = kam_settings.purge_height | float | default(0.4) %}
    {% set flow_rate = kam_settings.flow_rate | float | default(12) %}
    {% set purge_amount = kam_settings.purge_amount | int | default(80) %}
    {% set tip_distance = kam_settings.tip_distance | float | default(10) %}
    {% set purge_line_end_overlap = kam_settings.purge_line_end_overlap | int | default(50) %}
    {% set min_extrude_temp = kam_settings.min_extrude_temp | int | default(180) %}

    {% if printer.extruder.temperature < min_extrude_temp %}                                                           # check wheter hotend is heated up
        RESPOND TYPE=error MSG="Hotend is not up to temp. Please heat it."
    {% endif %}

    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_y_max = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y max
    
    {% if purge_index > purge_sections_amount and continuous is true %}
        SAVE_VARIABLE VARIABLE=purge_index VALUE=1
    {% endif %}
    
    {% set purge_begin_x = printer.toolhead.axis_minimum.x + x_purge_offset %}                                                # gets the start point of the overall purge line
    {% set purge_end_x = printer.toolhead.axis_maximum.x - ( 2 * x_purge_offset ) %}                                          # gets the end point of the overall purge line
    {% set purge_begin_y = printer.toolhead.axis_minimum.y + y_purge_offset %}                                                                   # gets the start point of the overall purge line
    {% set purge_move_speed = (flow_rate / 4.0) * 60 | float %}
    
    {% set section_size = purge_end_x // purge_sections_amount %}                                                                   # divide the full purge section in multiple sections with the given purge_sections_amount
    {% set section_index = (purge_index - 1) % purge_sections_amount | int %}                                                       # this line calculates the section_index, which represents which section the current purge falls into based on the purge_index and the number of purge_sections_amount
    {% set purge_start_x = (section_index * section_size) + x_purge_offset | int %}                                           # gets the first coordinate of the purge line
    {% set purge_end_x = (((section_index + 1) * section_size)) - (3 * (purge_line_end_overlap * 0.01)) + x_purge_offset %}                                                                    # gets the last coordinate of the purge line

    {% if purge_y_max >= purge_begin_y %}
        RESPOND TYPE=ERROR MSG="Print will interfere with purge line, consider changing the objects location in the slicer or modify the y offset if possible."
    {% endif %}

    {% if printer.firmware_retraction is defined %}
        {% set retract = G10 | string %}
        {% set unretract = G11 | string %}
    {% else %}
        {% set retract = 'G1 E-1 F2100' | string %}
        {% set unretract = 'G1 E1 F2100' | string %}
    {% endif %}

    {% if continuous and not delta_mode %}

        SAVE_GCODE_STATE NAME=prepurge                                                                                              # create gcode state

        G92 E0                                                                                                                      # reset extruder
        G0 F5000                                                                                                                    # set travel speed
        G90                                                                                                                         # set absolute positioning
        G0 Z{purge_height}
        G0 X{purge_start_x} Y{purge_begin_y}                                                                                        # move to the start of the purge line
        M83                                                                                                                         # set absolute positioning
        G1 E{tip_distance} F{purge_move_speed}
        G1 X{purge_end_x} E{purge_amount/8} F{purge_move_speed} E{purge_amount/8} F{purge_move_speed}                               # print the purge line
        {retract}                                                                                                                   # unretract filament
        G92 E0                                                                                                                      # set extruder back to zero
        M82                                                                                                                         # set relative positioning
        G0 Z{purge_height * 2}                                                                                                      # move nozzle up

        SAVE_VARIABLE VARIABLE=purge_index VALUE={purge_index + 1}                                                                  # increase purge_index by 1 for the next purge/print

        RESTORE_GCODE_STATE NAME=prepurge                                                                                           # restore the gcode state
    
    {% elif not continuous %}
        
        {% if purge_index > purge_sections_amount %}                                                                                # start print should check this before doing purge so printer isnt uselessly heated before aborting print. But doing this check anyways
            {% if stop_print_on_warning is true %}
                {action_raise_error("Purge area is full! Please remove all purges from the buildplate. Use RESET_PURGES when done.")}
            {% else %}
                RESPOND TYPE=error MSG="Purge area is full! Please remove all purges from the buildplate."
                G4 S{warning_time}
                RESET_PURGES
            {% endif %}   
        {% endif %}

        SAVE_GCODE_STATE NAME=prepurge                                                                                              # create gcode state

        G92 E0                                                                                                                      # reset extruder
        G0 F5000                                                                                                                    # set travel speed
        G90                                                                                                                         # set absolute positioning
        {% if printer.toolhead.position.z < 5 and purge_index >= 1 %}                                                               # check if the toolhead has clearance for the purge lines
            G0 Z{purge_height * 2}
        {% else %}
            G0 Z{purge_height}
        {% endif %}

        G0 X{purge_start_x} Y{purge_begin_y}                                                                                        # move to the start of the purge line
        G0 Z{purge_height}
        M83                                                                                                                         # set absolute positioning
        G1 E{tip_distance} F{purge_move_speed}
        G1 X{purge_end_x} E{purge_amount/8} F{purge_move_speed}                                                                     # print the purge line
        {retract}                                                                                                                   # unretract filament
        G92 E0                                                                                                                      # set extruder back to zero
        M82                                                                                                                         # set relative positioning
        G0 Z{purge_height * 2}                                                                                                      # move nozzle up

        SAVE_VARIABLE VARIABLE=purge_index VALUE={purge_index + 1}                                                                  # increase purge_index by 1 for the next purge/print

        RESTORE_GCODE_STATE NAME=prepurge                                                                                           # restore the gcode state
    {% elif continuous and delta_mode %}

            {% set delta_purge_edge_offset = kam_settings.delta_purge_edge_offset | int | default(0) %}
            {% set print_radius = printer.toolhead.print_radius - delta_purge_edge_offset %}
            {% set delta_purge_location = kam_settings.delta_purge_location | int | default(1) %}
            {% set delta_purge_edge_offset = kam_settings.delta_purge_edge_offset | int | default(0) %}
            {% set delta_purge_location = kam_settings.variable_delta_purge_location | lower | default("bottom_right") %}
            {% set purge_section_angle = 90 / purge_sections_amount %}

            {% set purge_locations = {
                "bottom_right": 1,
                "bottom_left": 2,  
                "top_left": 3,
                "top_right": 4,
            } %}
            
            {% set purge_location = {purge_locations[delta_purge_location]} %}

            # Thanks to the amazing Aubey! we now have sin and cos approximation in Jinja, huge thanks to her!
            {% set rad_angle_full = (curr_angle|float * pi / 180) %}

            {% set rad_angle = ((rad_angle_full % tau) - (tau / 2)) | float %}

            {% if rad_angle < (-(tau / 4)) %}
                {% set rad_angle = (rad_angle + (tau / 2)) | float %}
                {% set final_mult = (-1) %}
            {% elif rad_angle > (tau / 4) %}
                {% set rad_angle = (rad_angle - (tau / 2)) | float %}
                {% set final_mult = (-1) %}
            {% else %}
                {% set final_mult = (1) %}
            {% endif %}

            {% set sin0 = (rad_angle) %}
            {% set sin1 = ((rad_angle ** 3) / 6) | float %}
            {% set sin2 = ((rad_angle ** 5) / 120) | float %}
            {% set sin3 = ((rad_angle ** 7) / 5040) | float %}
            {% set sin4 = ((rad_angle ** 9) / 362880) | float %}
            {% set sin5 = ((rad_angle ** 11) / 39916800) | float %}
            {% set sin6 = ((rad_angle ** 13) / 6227020800) | float %}
            {% set sin7 = ((rad_angle ** 15) / 1307674368000) | float %}
            {% set sin = (-(sin0 - sin1 + sin2 - sin3 + sin4 - sin5 + sin6 - sin7) * final_mult) | float %}

            {% set cos0 = (1) | float %}
            {% set cos1 = ((rad_angle ** 2) / 2) | float %}
            {% set cos2 = ((rad_angle ** 4) / 24) | float %}
            {% set cos3 = ((rad_angle ** 6) / 720) | float %}
            {% set cos4 = ((rad_angle ** 8) / 40320) | float %}
            {% set cos5 = ((rad_angle ** 10) / 3628800) | float %}
            {% set cos6 = ((rad_angle ** 12) / 479001600) | float %}
            {% set cos7 = ((rad_angle ** 14) / 87178291200) | float %}
            {% set cos = (-(cos0 - cos1 + cos2 - cos3 + cos4 - cos5 + cos6 - cos7) * final_mult) | float %}

            #----------------------------------------------------------------------------------------------

            {% set purge_end_x = print_radius * (cos * ( purge_section_angle * pi / 180 )) - (purge_location * pi / 2) %}
            {% set purge_end_y = print_radius * (sin * ( purge_section_angle * pi / 180 )) - (purge_location * pi / 2) %}

            {% set delta_purge_end_location_new = delta_purge_end_location | trim('()') | split(', ') %}
            {% set purge_start_x = delta_purge_end_location_new[0] %}
            {% set purge_begin_y = delta_purge_end_location_new[1] %}

            G92 E0                                                                                                                      # reset extruder
            G0 F5000                                                                                                                    # set travel speed
            G90                                                                                                                         # set absolute positioning
            {% if printer.toolhead.position.z < 5 and purge_index >= 1 %}                                                               # check if the toolhead has clearance for the purge lines
                G0 Z{purge_height * 2}
            {% else %}
                G0 Z{purge_height}
            {% endif %}

            G0 X{purge_start_x} Y{purge_begin_y}

            G0 Z{purge_height}
            M83                                                                                                                         # set absolute positioning
            G1 E{tip_distance} F{purge_move_speed}
            G3 X{purge_end_x} Y{purge_end_y} R{print_radius} E{purge_amount/8} F{purge_move_speed}                                      # print the arc purge line

            SAVE_VARIABLE VARIABLE=purge_index VALUE={purge_index + 1}                                                                  # increase purge_index by 1 for the next purge/print
 
            SAVE_VARIABLE VARIABLE=delta_purge_end_location VALUE={{ purge_end_x }},{{ purge_end_y }}
            
            RESTORE_GCODE_STATE NAME=prepurge                                                                                           # restore the gcode state
    {% endif %}
